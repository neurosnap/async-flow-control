extends layout

block css
  link(rel='stylesheet', href='/css/index.css')

block js
  script(src='./bower/impress.js/js/impress.js')
  script.
    impress().init();
  script(src='/js/dist/index.js')

block content
  div.fallback-message
    p Your browser <b>doesn't support the features required</b> by impress.js, so you are presented with a simplified version of this presentation.
    p For the best experience please use the latest <b>Chrome</b>, <b>Safari</b> or <b>Firefox</b> browser.

  div#impress
    div(id='title', class='step', data-x='0' data-y='0' data-scale='4')
      h1 Avoiding the pyramid of doom
      span(class='try') by Eric Bower
      p
        a(href='http://neurosnap.net/') neurosnap.net
      p
        a(href='https://github.com/neurosnap') <i class='fa fa-github'></i> @neurosnap
      p
        a(href='https://twitter.com/neurosnap') <i class='fa fa-twitter'></i> @neurosnap

    div(id='what', class='step slide', data-x='-2800', data-y='-1000')
      h1(class='title') What is the Pyramid of Doom?
      ul
        li Code structure helps determine its function, clarity, and quality.
        li Indentation is necessary for visualizing the flow control of a program
        li Abrupt code indentation is what is referred to as <b>the pyramid of doom</b>
        li Linus Torvalds thinks that greater than three levels of indentation is a code smell which is part of a greater design flaw

      blockquote
        | Now, some people will claim that having 8-character indentations makes
        | the code move too far to the right, and makes it hard to read on a
        | 80-character terminal screen.  The answer to that is that if you need
        | more than 3 levels of indentation, you're screwed anyway, and should fix
        | your program. <a href='https://www.kernel.org/doc/Documentation/CodingStyle'>Linux CodeStyle</a>

    div(id='noam', class='step slide', data-x='-2800', data-y='-2000')
      h1(class='title') Even Noam Chomsky Threw Down
      ul
        li.
          Studies by Noam Chomsky suggest that few people can understand more
          than three levels of nested ifs <br />
          <a href='http://www.amazon.com/Managing-structured-techniques-Strategies-development/dp/0917072561'>Managing the structured techniques: Strategies for software development in the 1990's</a>
        li.
          Many researchers recommend avoiding nesting to more than four levels <br />
          <a href='http://www.amazon.com/Software-Reliability-Principles-Glenford-Myers/dp/0471627658'>Software Reliability: Principles and Practices</a> <br />
          <a href='http://www.amazon.com/Software-Engineering-Concepts-Professional-Vol/dp/0201122316%3FSubscriptionId%3D0JRA4J6WAV0RTAZVS6R2%26tag%3Dworldcat-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0201122316'>Software Engineering Concepts</a>

      p(class='text-center')
        img(src='/img/noam.jpg', style='height: 450px; width: auto;')

    div(id='study', class='step slide', data-x='-1500', data-y='-1000')
      h1(class='title') Measuring nesting of popular Github repositories
      ul
        li We found the most popular (stars, forks) javascript libraries on Github using their API
        li We downloaded the repositories locally
        li We removed non-javascript code from those repositories
        li We formatted all lines of code to 4-space indentation
        li We iterated through all lines of code to determine their average, mode, max, stddev, variance indendation levels

    div(id='result_one', class='step slide', data-x='-1500', data-y='-2000')
      p(class='text-center')
        img(src='/img/avg_indent_stars.png')

    div(id='result_two', class='step slide', data-x='-1500', data-y='-3000')
      p(class='text-center')
        img(src='/img/avg_indent_forks.png')

    div(id='conclusion', class='step slide' data-x='-1500', data-y='-4000')
      h1(class='title') What does this "study" tell us?
      ul
        li It appears to reinforce what the experts have said
        li Most popular javascript libraries sit at an average indentation level of 3

      p(class='text-center')
        img(src='/img/no_clue.jpg')

    div(id='task', class='step slide' data-x='-2800', data-y='1000')
      h1(class='title') The Task
      ul
        li Aggregate the most popular articles from <a href='http://chartbeat.com' target='_blank'>Chartbeat</a> for seven different news sites
          ul
            li <a href='http://detroitnews.com' target='_blank'>detroitnews.com</a>
            li <a href='http://freep.com' target='_blank'>freep.com</a>
            li <a href='http://battlecreekenquirer.com' target='_blank'>battlecreekenquirer.com</a>
            li <a href='http://hometownlife.com' target='_blank'>hometownlife.com</a>
            li <a href='http://lansingstatejournal.com' target='_blank'>lansingstatejournal.com</a>
            li <a href='http://livingstondaily.com' target='_blank'>livingstondaily.com</a>
            li <a href='http://thetimesherald.com' target='_blank'>thetimesherald.com</a>
        li Sort them descending by real-time popularity
        li Example: <a href='http://detroitnow.io' target='_blank'>detroitnow.io</a>

    div(id='method_one', class='step slide' data-z='-3000' data-rotate='-90' data-x='800', data-y='-1800' data-scale='5')
      h1(class='title') Method #1: Callback Hell, <i style='color: tomato;'>NSFW</i>
      pre
        code.javascript.
          router.get('/cbh/', function(req, res, next) {
              let articles = [];
              get(compile_url('freep.com'), function(err, freep_response) {
                  if (err) throw err;
                  articles = articles.concat(process_response(freep_response));
                  get(compile_url('detroitnews.com'), function(err, det_response) {
                      if (err) throw err;
                      articles = articles.concat(process_response(det_response));
                      get(compile_url('battlecreekenquirer.com'), function(err, battle_response) {
                          if (err) throw err;
                          articles = articles.concat(process_response(battle_response));
                          get(compile_url('hometownlife.com'), function(err, hometown_response) {
                              if (err) throw err;
                              articles = articles.concat(process_response(hometown_response));
                              res.json(articles);
                          });
                      });
                  });
              });
          });

    div(id='method_two', class='step slide' data-z='-3000' data-rotate='-90' data-x='5200', data-y='-1800' data-scale='5')
      h1(class='title') Method #2: Callbacks with Counter
      pre
        code.javascript.
          router.get('/cbhl/', function(req, res, next) {
              let articles = [];
              let response_counter = 0;
              for (let i = 0; i < config.sites.length; i++) {
                  let site = config.sites[i];
                  get(compile_url(site), function(index, err, response) {
                      if (err) throw err;
                      articles = articles.concat(process_response(response));
                      response_counter++;
                      if (response_counter == 7) {
                        res.json(articles);
                      }
                  }.bind(this, i));
              }
          });

    div(id='method_three', class='step slide' data-z='-3000' data-rotate='-90' data-x='9600', data-y='-1800' data-scale='5')
      h1(class='title') Method #3: Third Party Library 'Async'
      pre
        code.javascript.
          router.get('/parallel/', function(req, res, next) {
            function parallel_cb(site) {
              return function(callback) {
                get(compile_url(site), function(err, response) {
                  callback(err, response);
                });
              };
            }
            async.parallel([
              parallel_cb('detroitnews.com'),
              parallel_cb('freep.com'),
              ... // truncated for brevity
            ], function(err, responses) {
              let articles = [];
              for (let i = 0; i < responses.length; i++) {
                articles = articles.concat(process_response(responses[i]));
              }
              res.json(articles);
            });
          });