extends layout

block css
  link(rel='stylesheet', href='/css/index.css')

block js
  script(src='./bower/impress.js/js/impress.js')
  script.
    impress().init();
  script(src='/js/index.js')

block content
  div.fallback-message
    p Your browser <b>doesn't support the features required</b> by impress.js, so you are presented with a simplified version of this presentation.
    p For the best experience please use the latest <b>Chrome</b>, <b>Safari</b> or <b>Firefox</b> browser.

  div#impress
    div(id='title', class='step', data-x='0' data-y='0' data-scale='5')
      h1 Avoiding the pyramid of doom
      span(class='try') by Eric Bower
      p
        a(href='http://github.com/neurosnap/async-flow-control', target='_blank')<i class='fa fa-github'> async-flow-control</i>
      p
        a(href='http://neurosnap.net/', target='_blank') neurosnap.net
      p
        a(href='https://github.com/neurosnap', target='_blank') <i class='fa fa-github'></i> @neurosnap
      p
        a(href='https://twitter.com/neurosnap', target='_blank') <i class='fa fa-twitter'></i> @neurosnap

    div(id='what', class='step slide', data-x='1000', data-y='0')
      h1(class='title') What is the Pyramid of Doom?
      ul
        li Code structure helps determine its function, clarity, and quality.
        li Indentation is necessary for visualizing the flow control of a program
        li Abrupt code indentation is called <b>the pyramid of doom</b>
        li Linus Torvalds thinks that greater than three levels of indentation is code smell

      blockquote
        | The answer to that is that if you need
        | more than 3 levels of indentation, you're screwed anyway, and should fix
        | your program. <a href='https://www.kernel.org/doc/Documentation/CodingStyle'>Linux CodeStyle</a>

    div(id='deal', class='step slide', data-x='2000', data-y='0')
      h1(class='title') What's the big deal?
      ul
        li.
          Studies by Noam Chomsky suggest that few people can understand more
          than three levels of nested ifs <br />
          <a href='http:\/\/www.amazon.com/Managing-structured-techniques-Strategies-development/dp/0917072561'>Managing the structured techniques: Strategies for software development in the 1990's</a>
        li.
          Many researchers recommend avoiding nesting to more than four levels <br />
          <a href='http:\/\/www.amazon.com/Software-Reliability-Principles-Glenford-Myers/dp/0471627658'>Software Reliability: Principles and Practices</a> <br />
          <a href='http:\/\/www.amazon.com/Software-Engineering-Concepts-Professional-Vol/dp/0201122316%3FSubscriptionId%3D0JRA4J6WAV0RTAZVS6R2%26tag%3Dworldcat-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0201122316'>Software Engineering Concepts</a>
        li In python, indentation is a rule not a guideline
        li "Flat is better than nested" is a mantra in python

    div(id='study', class='step slide', data-x='3000', data-y='0')
      h1(class='title') Measuring nesting of popular Github repositories <a href='https://github.com/neurosnap/code-nest'>Repo</a>
      ul
        li We found the most popular (stars, forks) javascript libraries on Github
        li We downloaded the repositories locally
        li We removed non-javascript code from those repositories
        li We formatted all lines of code to 4-space indentation
        li We iterated through all lines of code to determine their average indendation levels

    div(id='result_one', class='step slide', data-x='4000', data-y='0')
      p(class='text-center hundy')
        img(src='/img/avg_indent_stars.png')

    div(id='result_two', class='step slide', data-x='5000', data-y='0')
      p(class='text-center hundy')
        img(src='/img/avg_indent_forks.png')

    div(id='conclusion', class='step slide', data-x='6000', data-y='0')
      h1(class='title') What does this "study" tell us?
      ul
        li Reinforces what the experts have said
        li Most popular javascript libraries average <strong>three</strong> levels of indentation

      p(class='text-center forty')
        img(src='/img/no_clue.jpg')

    div(id='task', class='step slide', data-x='7000', data-y='0')
      h1(class='title') The Task
      ul
        li Aggregate the most popular articles from <a href='http://chartbeat.com' target='_blank'>Chartbeat</a> for seven different news sites
          ul
            li <a href='http://detroitnews.com' target='_blank'>detroitnews.com</a>
            li <a href='http://freep.com' target='_blank'>freep.com</a>
            li <a href='http://battlecreekenquirer.com' target='_blank'>battlecreekenquirer.com</a>
            li <a href='http://hometownlife.com' target='_blank'>hometownlife.com</a>
            li <a href='http://lansingstatejournal.com' target='_blank'>lansingstatejournal.com</a>
            li <a href='http://livingstondaily.com' target='_blank'>livingstondaily.com</a>
            li <a href='http://thetimesherald.com' target='_blank'>thetimesherald.com</a>
        li Sort them descending by real-time popularity
        li Example: <a href='http://detroitnow.io' target='_blank'>detroitnow.io</a>

    div(id='method_one', class='step slide', data-x='8000', data-y='0')
      h1(class='title') Method #1: Callback Hell, <i style='color: tomato;'>NSFW</i> <a href='/callback-hell/' target='_blank'>Demo</a>
      pre
        code.javascript.
          var articles = [];
          get(compile_url('freep.com'), function(err, freep_response) {
              if (err) throw err;
              articles = articles.concat(process_response(freep_response));
              get(compile_url('detroitnews.com'), function(err, det_response) {
                  if (err) throw err;
                  articles = articles.concat(process_response(det_response));
                  get(compile_url('battlecreekenquirer.com'), function(err, battle_response) {
                      if (err) throw err;
                      articles = articles.concat(process_response(battle_response));
                      get(compile_url('hometownlife.com'), function(err, hometown_response) {
                          if (err) throw err;
                          articles = articles.concat(process_response(hometown_response));
                          console.log(articles);
                      });
                  });
              });
          });

    div(id='method_one_discuss', class='step slide', data-x='9000', data-y='0')
      h1(class='title') Method #1: Callback Hell
      ul
        li <strong>30</strong> lines of code
        li <strong>4.5</strong> average indentation level
        li <strong>8</strong> max indentation level
        li Not DRY (it repeats itself n times, where n is the number of sites)
        li Scaling requires writing more code
        li Difficult to read
        li Requires all requests to be successful

    div(id='method_two', class='step slide', data-x='10000', data-y='0')
      h1(class='title') Method #2: Callbacks with Counter <a href='/callback-counter/' target='_blank'>Demo</a>
      pre
        code.javascript.
          var sites = ['detroitnews.com', 'freep.com', ...];
          var articles = [];
          var response_counter = 0;
          for (var i = 0; i < sites.length; i++) {
              var site = sites[i];
              get(compile_url(site), function(index, err, response) {
                  if (err) throw err;
                  articles = articles.concat(process_response(response));
                  response_counter++;
                  if (response_counter == sites.length) {
                    console.log(articles);
                  }
              }.bind(this, i));
          }

    div(id='method_two_discuss', class='step slide', data-x='11000', data-y='0')
      h1(class='title') Method #2: Callbacks with Counter
      ul
        li <strong>13</strong> lines of code
        li <strong>2.2</strong> average indentation level
        li <strong>4</strong> max indentation level
        li DRY (Don't repeat yourself)
        li Fairly readable
        li Scaling only requires adding to an array
        li Looping requests can cause context issues
        li Requires all requests to be successful

    div(id='method_three', class='step slide',  data-x='12000', data-y='0')
      h1(class='title') Method #3: Third Party Library '<a href='https://github.com/caolan/async#parallel'>async</a>' <a href='/parallel/' target='_blank'>Demo</a>
      pre
        code.javascript.
          function parallel_cb(site) {
              return function(callback) {
                  get(compile_url(site), function(err, response) {
                      callback(err, response);
                  });
              };
          }
          async.parallel([
              parallel_cb('detroitnews.com'),
              parallel_cb('freep.com')
          ], function(err, responses) {
              if (err) throw err;
              var articles = [];
              for (var i = 0; i < responses.length; i++) {
                  articles = articles.concat(process_response(responses[i]));
              }
              console.log(articles);
          });

    div(id='method_three_discuss', class='step slide', data-x='13000', data-y='0')
      h1(class='title') Method #3: Third Party Library '<a href='https://github.com/caolan/async#parallel'>async</a>'
      ul
        li <strong>15</strong> lines of code
        li <strong>2.1</strong> average indentation level
        li <strong>4</strong> max indentation level
        li DRY
        li Readable
        li Scaling only requires adding to an array
        li Does not require all requests to be successful
        li Still relies on callbacks which can lead to nesting

    div(id='method_four', class='step slide', data-x='14000', data-y='0')
      h1(class='title') Method #4: Promises using '<a href='https://github.com/petkaantonov/bluebird'>bluebird</a>' <a href='/promise/' target='_blank'>Demo</a>
      pre
        code.javascript.
          var current = Promise.resolve();
          Promise.map(config.sites, function(url) {
              current = current.then(function() {
                  return getAsync(compile_url(url));
              });
              return current;
          }).map(function(response) {
              return process_response(response);
          }).then(function(results) {
              console.log(_.flatten(results));
          }).catch(function(err) {
              throw err;
          });

    div(id='method_four_discuss', class='step slide', data-x='15000', data-y='0')
      h1(class='title') Method #4: Promises using '<a href='https://github.com/petkaantonov/bluebird'>bluebird</a>' <a href='/promise/' target='_blank'>Demo</a>
      ul
        li <strong>13</strong> lines of code
        li <strong>1.6</strong> average indentation level
        li <strong>3</strong> max indentation level
        li DRY
        li Excellent error handling
        li Readable
        li Scaling only requires adding to an array
        li Does not require all requests to be successful
        li Relies on third-party library
        li Synchronous chanining of callbacks
        li Still relies on callbacks which can lead to nesting
        li Slower than vanilla callbacks <a href='https://github.com/spion/async-compare'><i class='fa fa-github'></i> async-compare</a>

    div(id='method_five', class='step slide', data-x='16000', data-y='0')
      h1(class='title') Method #5: Coroutines using ES6 & '<a href='https://github.com/petkaantonov/bluebird'>bluebird</a>' <a href='/coroutine/' target='_blank'>Demo</a>
      pre
        code.javascript.
          (Promise.coroutine(function* () {
            let articles = [];
            let responses;
            try {
                //responses = yield [for (site of config.sites) getAsync(compile_url(site))];
                responses = yield [
                    getAsync(compile_url('detroitnews.com')),
                    getAsync(compile_url('freep.com'))
                ];
            } catch (err) {
                throw err;
            }
            for (let i = 0; i < responses.length; i++) {
                articles = articles.concat(process_response(responses[i]));
            }
            console.log(articles);
          }))();

    div(id='method_five_discuss', class='step slide', data-x='17000', data-y='0')
      h1(class='title') Method #5: Coroutines using ES6 & '<a href='https://github.com/petkaantonov/bluebird'>bluebird</a>'
      ul
        li <strong>11</strong> lines of code
        li <strong>1.3</strong> average indentation level
        li <strong>2</strong> max indentation level
        li DRY
        li Excellent error handling
        li Readable
        li Relies on third-party library and ES6
        li Slower than vanilla callbacks <a href='https://github.com/spion/async-compare'><i class='fa fa-github'></i> async-compare</a>
        li Coroutines are a difficult concept to grasp
        li Code flow looks synchronous but is actually asynchronous

    div(id='method_six', class='step slide', data-x='18000', data-y='0')
      h1(class='title') Method #6: Async/Await using ES7
      pre
        code.javascript.
          (async function() {
            let articles = [];
            let responses;
            try {
                //responses = await Promise.all([for (site of config.sites) getAsync(compile_url(site))]);
                responses = await Promise.all([
                    getAsync(compile_url('detroitnews.com')),
                    getAsync(compile_url('freep.com'))
                ]);
            } catch (err) {
                throw err;
            }
            for (let i = 0; i < responses.length; i++) {
                articles = articles.concat(process_response(responses[i]));
            }
            console.log(articles);
          }))();

    div(id='compare', class='step slide', data-x='19000', data-y='0')
      h1(class='title') Comparison
      table(style='width: 100%;')
        thead
          tr.text-center
            th Method #
            th Paradigm
            th LoC
            th Avg. Indent
            th Max. Indent
        tbody
          tr.text-center
            td 1
            td Callback Hell
            td 30
            td 4.5
            td 8
          tr.text-center
            td 2
            td Callback Counter
            td 13
            td 2.2
            td 4
          tr.text-center
            td 3
            td Parallel
            td 15
            td 2.1
            td 4
          tr.text-center
            td 4
            td Promise
            td 13
            td 1.6
            td 3
          tr.text-center
            td 5
            td Coroutine
            td 11
            td 1.3
            td 2

